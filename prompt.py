from tool import get_completion

# text = f"""
# 您应该提供尽可能清晰、具体的指示，以表达您希望模型执行的任务。\
# 这将引导模型朝向所需的输出，并降低收到无关或不正确响应的可能性。\
# 不要将写清晰的提示词与写简短的提示词混淆。\
# 在许多情况下，更长的提示词可以为模型提供更多的清晰度和上下文信息，从而导致更详细和相关的输出。
# """
# # 需要总结的文本内容
# prompt = f"""
# 把用三个反引号括起来的文本总结成一句话。
# 1.2 寻求结构化的输出
# 有时候我们需要语言模型给我们一些结构化的输出，而不仅仅是连续的文本。
# 什么是结构化输出呢？就是按照某种格式组织的内容，例如JSON、HTML等。这种输出非常适合在代码
# 中进一步解析和处理。例如，您可以在 Python 中将其读入字典或列表中。
# 在以下示例中，我们要求 GPT 生成三本书的标题、作者和类别，并要求 GPT 以 JSON 的格式返回给我
# 们，为便于解析，我们指定了 Json 的键。
# ```{text}```
# """
# # 指令内容，使用 ``` 来分隔指令和待总结的内容
# response = get_completion(prompt)
# print(response)


# prompt = f"""
# 请生成包括书名、作者和类别的三本虚构的、非真实存在的中文书籍清单，\
# 并以 JSON 格式提供，其中包含以下键:book_id、title、author、genre。
# """
# response = get_completion(prompt)
# print(response)


# 满足条件的输入（text中提供了步骤）
# text_1 = f"""
# 泡一杯茶很容易。首先，需要把水烧开。\
# 在等待期间，拿一个杯子并把茶包放进去。\
# 一旦水足够热，就把它倒在茶包上。\
# 等待一会儿，让茶叶浸泡。几分钟后，取出茶包。\
# 如果您愿意，可以加一些糖或牛奶调味。\
# 就这样，您可以享受一杯美味的茶了。
# """
# prompt = f"""
# 您将获得由三个引号括起来的文本。\
# 如果它包含一系列的指令，则需要按照以下格式重新编写这些指令：
# 第一步 - ...
# 第二步 - …
# …
# 第N步 - …
# 如果文本中不包含一系列的指令，则直接写“未提供步骤”。"
# \"\"\"{text_1}\"\"\"
# """
# response = get_completion(prompt)
# print("Text 1 的总结:")
# print(response)

# 不满足条件的输入（text中未提供预期指令）
# text_2 = f"""
# 今天阳光明媚，鸟儿在歌唱。\
# 这是一个去公园散步的美好日子。\
# 鲜花盛开，树枝在微风中轻轻摇曳。\
# 人们外出享受着这美好的天气，有些人在野餐，有些人在玩游戏或者在草地上放松。\
# 这是一个完美的日子，可以在户外度过并欣赏大自然的美景。
# 1.4 提供少量示例
# "Few-shot" prompting，即在要求模型执行实际任务之前，给模型一两个已完成的样例，让模型了解我
# 们的要求和期望的输出样式。
# 例如，在以下的样例中，我们先给了一个祖孙对话样例，然后要求模型用同样的隐喻风格回答关于“韧性”
# 的问题。这就是一个少样本样例，它能帮助模型快速抓住我们要的语调和风格。
# 利用少样本样例，我们可以轻松“预热”语言模型，让它为新的任务做好准备。这是一个让模型快速上手新
# 任务的有效策略。
# """
# prompt = f"""
# 您将获得由三个引号括起来的文本。\
# 如果它包含一系列的指令，则需要按照以下格式重新编写这些指令：
# 第一步 - ...
# 第二步 - …
# …
# 第N步 - …
# 如果文本中不包含一系列的指令，则直接写“未提供步骤”。"
# \"\"\"{text_2}\"\"\"
# """
# response = get_completion(prompt)
# print("Text 2 的总结:")
# print(response)

# prompt = f"""
# 您的任务是以一致的风格回答问题。
# 孩子: 请教我何为耐心。
# 祖父母: 挖出最深峡谷的河流源于一处不起眼的泉眼；最宏伟的交响乐从单一的音符开始；最复杂的挂毯以
# 一根孤独的线开始编织。
# 孩子: 请教我何为韧性。
# """
# response = get_completion(prompt)
# print(response)

# text = f"""
# 在一个迷人的村庄里，兄妹杰克和吉尔出发去一个山顶井里打水。\
# 他们一边唱着欢乐的歌，一边往上爬，\
# 然而不幸降临——杰克绊了一块石头，从山上滚了下来，吉尔紧随其后。\
# 虽然略有些摔伤，但他们还是回到了温馨的家中。\
# 尽管出了这样的意外，他们的冒险精神依然没有减弱，继续充满愉悦地探索。
# """
# # example 1
# prompt_1 = f"""
# 执行以下操作：
# 1-用一句话概括下面用三个反引号括起来的文本。
# 2-将摘要翻译成英语。
# 3-在英语摘要中列出每个人名。
# 4-输出一个 JSON 对象，其中包含以下键：english_summary，num_names。
# 请用换行符分隔您的答案。
# Text:
# ```{text}```
# """
# response = get_completion(prompt_1)
# print("prompt 1:")
# print(response)

# prompt_2 = f"""
# 1-用一句话概括下面用<>括起来的文本。
# 2-将摘要翻译成英语。
# 3-在英语摘要中列出每个名称。
# 4-输出一个 JSON 对象，其中包含以下键：English_summary，num_names。
# 请使用以下格式：
# 文本：<要总结的文本>
# 摘要：<摘要>
# 翻译：<摘要的翻译>
# 名称：<英语摘要中的名称列表>
# 输出 JSON：<带有 English_summary 和 num_names 的 JSON>
# Text: <{text}>
# """
# response = get_completion(prompt_2)
# print("\nprompt 2:")
# print(response)

# prompt = f"""
# 判断学生的解决方案是否正确。
# 问题:
# 我正在建造一个太阳能发电站，需要帮助计算财务。
# 土地费用为 100美元/平方英尺
# 我可以以 250美元/平方英尺的价格购买太阳能电池板
# 我已经谈判好了维护合同，每年需要支付固定的10万美元，并额外支付每平方英尺10美元
# 作为平方英尺数的函数，首年运营的总费用是多少。
# 学生的解决方案：
# 设x为发电站的大小，单位为平方英尺。
# 费用：
# 土地费用：100x
# 太阳能电池板费用：250x
# 维护费用：100,000美元+100x
# 总费用：100x+250x+100,000美元+100x=450x+100,000美元
# """
# response = get_completion(prompt)
# print(response)

# prompt = f"""
# 告诉我华为公司生产的GT Watch运动手表的相关信息
# """
# response = get_completion(prompt)
# print(response)

# 学习LLM-v1.0.0 学习到 四、1.1